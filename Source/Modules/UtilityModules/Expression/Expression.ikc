<?xml version="1.0"?>

<class name="Expression" description="Mathematical expression">

	<description type="text">
		Module that can take in an string that makes up a 
		mathematical expression, compile it, and evaluate it
		every tick.
		This version expects a single output, and that size of all 
		input vectors be the same.
		This module uses the Exprtk library:
		http://partow.net/programming/exprtk/index.html
	</description>
		<!--Features:
		Mathematical operators (+, -, *, /, %, ^)

		Functions (min, max, avg, sum, abs, ceil, floor, round, roundn, exp, log, log10, logn, pow, root, sqrt, clamp, inrange, swap)

		Trigonometry (sin, cos, tan, acos, asin, atan, atan2, cosh, cot, csc, sec, sinh, tanh, d2r, r2d, d2g, g2d, hyp)

		Equalities and Inequalities (=, ==, < >, !=, <, <=, >, >=)

		Assignment (:=, +=, -=, *=, /=, %=)

		Logical operators (and, nand, nor, not, or, xor, xnor, mand, mor)

		Control structures (if-then-else, ternary conditional, switch case, return-statement)

		Loop structures (while loop, for loop, repeat until loop, break, continue)

		Optimization of expressions (constant folding, strength reduction, operator coupling, special functions and dead code elimination)
		
		Example expressions:
		sqrt(1 - (x^2))
		clamp(-1,sin(2 * pi * x) + cos(y / 2 * pi),+1)
		sin(2 * x)
		if (((x + 2) == 3) and ((y + 5) <= 9),1 + w, 2 / z)
		inrange(-2,m,+2) == (({-2 <= m} and [m <= +2]) ? 1 : 0)
		({1 / 1} * [1 / 2] + (1 / 3)) - {1 / 4} ^ [1 / 5] + (1 / 6) -({1 / 7} + [1 / 8]*(1 / 9))
		a * exp(2 * t) + c
		z := x + sin(2 * pi / y)
		2x + 3y + 4z + 5w == 2 * x + 3 * y + 4 * z + 5 * w
		3(x + y) / 2 + 1 == 3 * (x + y) / 2 + 1
		(x + y)3 + 1 / 4 == (x + y) * 3 + 1 / 4
		(x + y)z + 1 / 2 == (x + y) * z + 1 / 2
		(sin(x/pi)cos(2y) + 1)==(sin(x / pi) * cos(2 * y) + 1)
		while(x <= 100) { x += 1; }
		x <= 'abc123' and (y in ('AStr' + 'ing')) or ('1x2y3z' != z)
		('REX' + x like '*123*') or ('a123b' ilike y)
		
		-->

	<example description="A simple example">
		<module
			class="Expression"
			name="Expression"
			expression = "x+y"
			inputs = "x,y"
			debug = "true"
		/>
	</example>

	<parameter name="expression" type="list" default="x" description="Expression string" />
	<parameter name="inputs" type="list" default="x" description="Variable list" />
	

	<parameter name="debug" type="bool" default="false" description="Turns on or off debugmode" />

	<input name="*" description="The first input" />

	<output name="OUTPUT" description="The first output" />

	<link class="Expression" />
		
	<author>
		<name>Trond Arild Tj√∏stheim</name>
		<email>trond_arild.tjosthem@lucs.lu.se</email>
		<affiliation>Lund University Cognitive Science</affiliation>
		<homepage></homepage>
	</author>

   <files>
   		<file>Expression.h</file>
   		<file>Expression.cc</file>
   		<file>Expression.ikc</file>
   </files>

</class>